{"./":{"url":"./","title":"前言","keywords":"","body":"1. Summary1.1. 说明1.2. 鼓励1. Summary Good Good Study, Day Day Up! 1.1. 说明 这个文档总结的由来，可以看我这篇博客，这个文档的最大的作用是为了帮助梳理知识，系统化一点。具体的知识点总结呢，就放到博客中的文章去吧~ 1.2. 鼓励 如果你觉得本书对你有所帮助，不妨请我喝杯咖啡，感谢支持！ "},"python/":{"url":"python/","title":"Python知识点","keywords":"","body":"1. Python知识点1. Python知识点 "},"python/python_resource.html":{"url":"python/python_resource.html","title":"Python资料","keywords":"","body":"1. Python资料1.1. Python系统性教程1.2. Python综合资料集合1. Python资料 1.1. Python系统性教程 Python Cookbook 3rd Edition Documentation-中文 python之旅 python进阶 python全栈之路 1.2. Python综合资料集合 豆瓣工程师-python2017年度榜单-董伟明 知乎工程师-python-web-guide "},"python/python_summary.html":{"url":"python/python_summary.html","title":"Python小知识","keywords":"","body":"1. Python小知识1.1. python源1.2. python编码1. Python小知识 1.1. python源 介绍了通过easy_install方法安装的pip的源和通用的pip源的设置，pydistutils.cfg的作用与pip.conf文件: Python中遇到的坑 1.2. python编码 wklken-PYTHON-进阶-编码处理小结 "},"python/python_packages.html":{"url":"python/python_packages.html","title":"常用标准库","keywords":"","body":"1. 常用标准库1.1. 参考1. 常用标准库 1.1. 参考 UsefulModules "},"python/python_3rd_packages.html":{"url":"python/python_3rd_packages.html","title":"常用三方库","keywords":"","body":"1. 常用三方库1.1. 队列1.1.1. collections1.2. 数据库相关1.3. itertools1.4. operator1.5. functools1.6. six1.7. requests1.8. eventlet1.9. greenlet1.10. pycrypto 安全1.11. SQLAlchemy1.12. Mock1.13. Unittest1.14. Multiprocessing1.15. Threading1.16. Queue1.17. Subprocess1.18. Profile/cProfile1.19. 时间模块相关1.19.1. arrow1.19.2. pendulum1.19.3. Delorean1.19.4. REF1.20. 开发工具1.20.1. HTTPie1.21. Linux1.21.1. paramiko1.22. 运维1.22.1. Ansible1.22.2. Sentry1.22.3. Luigi1.23. 好玩的工具1.23.1. sh1.23.2. Progressbar1.23.3. colorama1.23.4. YouTube-dl1.23.5. You-Get1.24. 参考1. 常用三方库 1.1. 队列 1.1.1. collections collections.OrderDict collections.defaultdict 1.2. 数据库相关 1.3. itertools 1.4. operator 1.5. functools Remark，做Python PPT工具。 1.6. six python2和python3通用性兼容性封装，openstack中使用，强烈推荐 1.7. requests 建议掌握 1.8. eventlet 协程的经典，下层使用的greenlet，建议掌握 1.9. greenlet 非常高效的协程封装，想了解协程机制的话，可以深入学习 1.10. pycrypto 安全 提供了几乎所有的加解密算法，下层使用的是cryptograph，建议做基本了解 1.11. SQLAlchemy 对SQL语句的封装，建议概念了解 1.12. Mock 测打桩，建议掌握 1.13. Unittest 建议掌握 1.14. Multiprocessing 多进程，建议基本了解，工作中不常用 1.15. Threading 多线程，建议掌握，不建议使用thread(thread在python3中变为内部库_thread) 1.16. Queue 多进程/多线程队列按序执行的场景，基本了解 1.17. Subprocess 用于创建新进程，可用于python调用shell/bash等，建议掌握。python调用shell/bash不建议os.system/commands.*（这些方式在python3已经移除）。 cookbook-执行外部命令并获取它的输出 1.18. Profile/cProfile 用于性能分析，非常非常好用，和pstat配合食用，建议掌握。 1.19. 时间模块相关 1.19.1. arrow Python：如何用一行代码获取上个月是几月 1.19.2. pendulum 1.19.3. Delorean 1.19.4. REF 6 个 Python 的日期时间库 1.20. 开发工具 1.20.1. HTTPie 是命令行HTTP客户端。其目标是使与Web服务的CLI交互尽可能人性化。它提供了一个简单的http命令，允许使用简单自然的语法发送任意HTTP请求，并显示彩色输出。HTTPie可用于测试，调试以及通常与HTTP服务器交互。 GitHub：https：//github.com/jakubroztocil/httpie 1.21. Linux 1.21.1. paramiko 只要是稍微搞过Python与linux的都会熟悉paramiko这个犀利的库。 它完美的契合的用户操作linux机器下的所有操作，ssh ftp等等… 1.22. 运维 1.22.1. Ansible 是一个极其简单的IT自动化系统。它处理配置管理，应用程序部署，云配置，临时任务执行和多节点编排 – 包括通过负载平衡器轻松实现零停机滚动更新等操作。 GitHub：https：//github.com/ansible/ansible 1.22.2. Sentry 从根本上讲是一项服务，可以帮助您实时监控和修复崩溃。服务器端使用Python，但它包含一个完整的API，支持在任何应用程序中使用任何语言发送事件。 GitHub：https：//github.com/getsentry/sentry 1.22.3. Luigi 是一个Python包，可用来创建复杂的批处理作业管道。可用来处理依赖项解析、工作流管理、可视化、处理故障、命令行集成等等。 GitHub：https：//github.com/spotify/luigi 1.23. 好玩的工具 1.23.1. sh pip install sh 1.23.2. Progressbar Progressbar 是 Python 中的一个文本进度条程序库，用于展示长时间运行操作的过程，从视觉上提示你程序的处理进度。 1.23.3. colorama 1.23.4. YouTube-dl 油管搬运工，可从youtube.com或其他视频平台下载视频。 GitHub：https：//github.com/rg3/youtube-dl 1.23.5. You-Get 是一个小型命令行实用程序，用于从Web下载媒体内容（视频，音频，图像），尤其是在手边没有合适工具的时候。 GitHub：https：//github.com/soimort/you-get 1.24. 参考 哪些 Python 库让你相见恨晚？ 8 个用于业余项目的优秀 Python 库 2018年GitHub最流行50大Python开源项目 Python 3 Module of the Week "},"python/python_gil.html":{"url":"python/python_gil.html","title":"GIL","keywords":"","body":"1. GIL1. GIL cenalulu.github.io/python/gil-in-python/ 多进程替换线程，执行计算密集型的任务 "},"python/web/":{"url":"python/web/","title":"Web框架","keywords":"","body":"1. Web框架1. Web框架 "},"python/web/flask.html":{"url":"python/web/flask.html","title":"Flask","keywords":"","body":"1. Flask1.1. 系列化教程1.2. Example1.3. 参考1. Flask 1.1. 系列化教程 The Flask Mega-Tutorial Part Flask中文文档 1.2. Example microblog miguelgrinberg/flasky 1.3. 参考 "},"python/web/django.html":{"url":"python/web/django.html","title":"Django","keywords":"","body":"1. Django1. Django "},"linux/":{"url":"linux/","title":"Linux知识点","keywords":"","body":"1. Linux知识点1. Linux知识点 "},"linux/lvm.html":{"url":"linux/lvm.html","title":"LVM分区","keywords":"","body":"1. LVM分区1.1. 磁盘分区表（partion table）1.2. 磁盘分区1.2.1. 分区常用命令1.3. 参考1. LVM分区 盘面上可以细分出扇区（Sector）与柱面（Cylinder)两种单位，其中扇区每个为512bytes那么大。 通常所说的”硬盘分区”就是指修改磁盘分区表，它定义了”第n个磁盘块是从第 x个柱面到第y个柱面”.因此，当系统要读取第n个磁盘块时，就是去读硬盘上第x个柱面到第y个柱面的信息. 整块磁盘的第一个扇区特别重要，因为它记录了整块磁盘的重要信息： 主引导分区（Master Boot Record, MBR）：可以安装引导加载程序的地方，有446bytes. 分区表（partition table）：记录整块磁盘分区的状态，有64bytes。 1.1. 磁盘分区表（partion table） 在分区表所在的64bytes容量中，总共分为四组记录区。每组记录区记录了该区段的起始与结束的柱面号码。 其实所谓的分区只是针对那个64bytes的分区表进行设置而已。 硬盘默认的分区表仅能写入四组分区信息 四组分区信息我们称为主（Primary）或者扩展（Extended）分区。 分区最小单位为柱面（cylinder）。 分区的优点： 数据安全 有助于数据读取的速度和性能 扩展分区的目的是使用额外的扇区记录分区信息，扩展分区本身并不能拿来格式化。由扩展分区切出来的分区，就被称为逻辑分区（logical partition）。逻辑分区的设备名称号码由5号开始。 主分区、扩展分区和逻辑分区的定义： 主分区与扩展分区最多可以有4个（磁盘限制） 扩展分区最多只有1个（操作系统限制） 逻辑分区是由扩展分区持续切割出来的分区 能够被格式化后作为数据访问的分区为主分区与逻辑分区，扩展分区无法格式化。 逻辑分区的个数依操作系统而不同，SATA硬盘则有11个逻辑分区（5号到15号）。 分区是个很麻烦的东西，因为它是以柱面为单位的“连续”磁盘空间，且扩展分区又是类似独立的磁盘空间。 扩展分区是不能直接用的，他是以逻辑分区的方式来使用的，所以说扩展分区可分成若干逻辑分区。 他们的关系是包含的关系，所有的逻辑分区都是扩展分区的一部分。 1.2. 磁盘分区 LVM卷管理 disk=/dev/vdb pvcreate ci-pv1 $disk # 磁盘还没有分主分区或者扩展分区，就可以直接创建物理卷了 lvcreate -L 100G -n apkg ci-vg1 # or lvcreate -L 100G --name apkg ci-vg1 lvdisplay #查看逻辑卷路径 mkfs.ext3 /dev/ci-vg1/apkg # 格式化 mount /dev/ci-vg1/apkg /apkg # 挂载 df -Th # 查看 接着，为了开机自动挂载，执行： echo \"mount /dev/ci-vg1/apkg /apkg\" >> /etc/rc.d/rc.local 1.2.1. 分区常用命令 lsblk：查看磁盘分区情况 ★★★ vgdisplay: 查看卷组信息 vgs： 查看卷组信息，简略 fdisk -l：查看系统内分区信息 1.3. 参考 Linx卷管理详解 Linux逻辑卷详解总结 Linux 磁盘和分区 Linux LVM简明教程 "},"linux/ssh_no_pass.html":{"url":"linux/ssh_no_pass.html","title":"Linux双向ssh免密登录","keywords":"","body":"1. Linux双向ssh免密登录1.1. 原理1.2. 步骤1.2.1. 生成公钥1.2.2. 拷贝公钥1.2.3. 验证1.3. 参考1. Linux双向ssh免密登录 1.1. 原理 双向，顾名思义，双方互通，此处的意思是多台 linux 两两免密登录。双向比单向多了些操作，单向只需把某一个linux的公钥发送给其他linux即可，而双向要实现集群中的每一台机器都保存其他所有机器的公钥。 1.2. 步骤 假设，你有两台机器，ip分别为A和B： 总共分为三步： 生成公钥 将A机器的公钥拷贝至B机器 将B机器的公钥拷贝至A机器 1.2.1. 生成公钥 如下命令生成公钥，默认会在~/.ssh/下生成id_rsa和id_rsa.pub。先检查一下机器是否已有公钥，如果没有再执行： ssh-keygen -t rsa -t 指定算法 -f 指定生成秘钥路径 -N 指定密码 1.2.2. 拷贝公钥 cd ~/.ssh scp id_rsa.pub root@B:/root/.ssh/authorized_keys #此命令在A机器执行，目的将公钥发送至B机器 scp id_rsa.pub root@A:/root/.ssh/authorized_keys #此命令在B机器执行，目的将公钥发送至B机器 scp: 加密的方式在本地主机和远程主机之间复制文件 参数: 源文件：指定要复制的源文件。也可以是远程地址 目标文件：目标文件。格式为user@host：filename（文件名为目标文件的名称）。 1.2.3. 验证 ssh B #在A机器上，看是否免密登陆B ssh A #在A机器上，看是否免密登陆B 如果发现设置免密登陆，还需要输入密码，那么检查一下/root``.ssh``authorized_keys目录和文件的权限。 chmod 600 authorized_keys chmod 700 .ssh 如果authorized_keys文件、$HOME/.ssh目录 或 $HOME目录让本用户之外的用户有写权限，那么sshd都会拒绝使用 ~/.ssh/authorized_keys 文件中的key来进行认证的。 1.3. 参考 Linux互通SSH免密码访问 服务器免密登录的实现以及异常解决方案 Linux 双向 SSH 免密登录 Centos SSH 免密码互通 scp命令 "},"db/":{"url":"db/","title":"数据库","keywords":"","body":"1. 数据库1. 数据库 "},"db/mysql.html":{"url":"db/mysql.html","title":"MySQL","keywords":"","body":"1. MySQL1. MySQL "},"db/mongo.html":{"url":"db/mongo.html","title":"MongoDB","keywords":"","body":"1. MongoDB1.1. 启动MongoDB1. MongoDB 1.1. 启动MongoDB mongod mongo "},"db/redis.html":{"url":"db/redis.html","title":"Redis","keywords":"","body":"1. Redis1.1. 好的资料1. Redis 1.1. 好的资料 redis index-中文 "},"computer/":{"url":"computer/","title":"计算机基础知识","keywords":"","body":"1. 计算机基础知识1. 计算机基础知识 "},"computer/computr_basic.html":{"url":"computer/computr_basic.html","title":"计算机基础","keywords":"","body":"1. 计算机基础1.1. 编译1. 计算机基础 1.1. 编译 工作中也经常听到编译，往往是和打包连一起的，“编译打包”。那么，编译到底是指什么呢？ 编译：一个 C 程序的艺术之旅 编译器的工作过程 "},"tools/":{"url":"tools/","title":"工具","keywords":"","body":"1. 工具1. 工具 "},"tools/git.html":{"url":"tools/git.html","title":"Git","keywords":"","body":"1. Git1. Git "},"tools/vim.html":{"url":"tools/vim.html","title":"Vim","keywords":"","body":"1. Vim1.1. 光标的移动1.1.1. 单词级1.1.2. 块级1.1.3. 高级移动1.2. 打开文件、查找内容1.2.1. vim中打开文件1.2.2. 文档内查找1.2.3. 匹配查找1.3. 文档的修改与保存1.3.1. 插入1.3.2. 删除1.3.3. 复制1.3.4. 粘贴1.3.5. 合并1.3.6. 替换1.3.7. 撤销、重做1.3.8. 保存文件1.3.9. 编辑1.4. 多窗口1.5. 设置vim1.5.1. 简单设置vim：1.5.2. 重复上一次命令1.5.3. 缩进1.6. 分屏与标签页1.6.1. 分屏方式1.6.2. 窗口跳转1.7. 插件1.7.1. 安装vim-plug1.7.2. vim-plug常用命令1.7.3. 怎么使用这些命令呢？1.8. FAQ1.8.1. Q:配置VIM，安装vim-plug插件之后，想要生效通过source ~/.vimrc命令生效配置，就会报错：E492: Not an editor command: Plug1.8.2. Q:从Win上复制文件时，常常因为换行符出错：1.9. 参考1. Vim 控制台运行 vimtutor 这是 vim 官方实操教程 三种模式： 一般模式 编辑模式 命令行模式 1.1. 光标的移动 1.1.1. 单词级 w or W 向移动到下一单词开头 ★★ b or B 向左移动到单词开头 ★★ 1.1.2. 块级 gg文档第一行，相当于1G ★★★ G文档最后一行,G移动到你n行 ★★ 0或home到行首（第1列） ★★ $或end到行尾 ★ :or gg跳转到第N行 ★★★ ctrl-f 屏幕向下移动一页 ctrl-b 屏幕向上移动一页 j或者↓，向下移动n行，同理，也可以实现左右移动 ★★★ v或者V，字符选择或者行选择 ★★★ ctrl-v 长方形选择，牛逼了 ★★★ 注意，所有命令都可以加一个数字N，表示对后面的命令执行N次，比如G表示移动到第n行。 1.1.3. 高级移动 '. 跳到最后修改的那一行 gd 跳到当前变量在当前文件的定义处，其实是跳转到当前变量在此文件中第一次出现的地方，不过一般来说，第一次出现的地方也就是变量定义的地方 ★★★ ma 在当前位置做标记，用字母a标记当前光标所在位置，这里a可以是任意字母 `a 跳到标记a处 ★★ `` 跳到上一次光标所在处，相当有用 ★★★ 1.2. 打开文件、查找内容 1.2.1. vim中打开文件 :e ，在vim中打开名为filename的文件，如果没有，则创建； 1.2.2. 文档内查找 * 向后查找光标当前所在单词 # 向前查找光标当前所在单词 ★★★ / 向后查找指定字符 ? 向后查找指定字符串 n 继续查找下一个 ★★★ N 继续查找上一个 1.2.3. 匹配查找 vim 中可以使用% 对 (和 )，[ 和 ]，{和 } 进行匹配查找，当光标位于其中一个 符号上时，按下%，光标会跳到与之匹配的另外一个符号上。 括号匹配，程序员必备 1.3. 文档的修改与保存 1.3.1. 插入 a 当前字符后插入 ★★★ I 行首插入 A 行尾插入 o 在下一行插入 ★★★ O 在上一行插入 ★★★ ctrl-p 插入模式下进行单词补齐，比如有一个变量为fifth_test_day，那么你只需要敲入部分名之后，就可以按下ctrl-p自动补全了。★★★ 1.3.2. 删除 x 删除当前字符 X 向前删除一个字符，相当于键盘的Back Space。 dd 删除当前行，并将删除内容保存在vim剪贴板 ndd表示删除光标所在的向下n行。★★ dw 删除光标所在位置到下个字的第一个字母 daw 删除一个单词，包括词尾空格，实用，不用将光标移动到单词第一个字母，aw表示a word d 删除指定内容，保存在剪贴板 c 删除指定内容，保存在剪贴板，同时进入insert模式 说明，部分是对操作内容的描述，比如，删除一个单词，可以dw或者de，要复制当前位置到行尾内容，可以输入y$，要删除后面3个字符并插入，就输入c3l。 1.3.3. 复制 yy 复制当前行到vim剪贴板 nyy复制光标向下n行 ★★★ y 复制指定内容到剪贴板 1.3.4. 粘贴 p 当前位置后粘贴 ★★★ P 在当前位置前粘贴 1.3.5. 合并 J 当前行与下一行合并 1.3.6. 替换 r 将当前字符替换为X ★★★ :%s/search>// 查找search内容并替换为replace内容，正则表达来替换，这个命令可以消除所有行位多余的空格：:%s/\\s\\+$// ★★★ ,s/word1/word2/gc n1/n2都是数字，在n1行和n2行之间寻找word1，替换为word2。c代表confirm，替换前需要你确认，不加就默认全部替换。n2用$表示时，表示搜索到最后一行。★★★ 1.3.7. 撤销、重做 u 撤销 ★★★ ctrl-r 重做 ★★★ . 重复前一个操作的意思 ★★★ 1.3.8. 保存文件 :wq or ZZ 保存并推出 :q! or ZQ 强制推出，不保存 saveas 文件另存为 1.3.9. 编辑 ctrl-n Vim自带的补全（按照全文已有输入）★★★ 1.4. 多窗口 :sp 切割窗口 ctrl-w-j或者ctrl-w-↓ 跳转窗口 :q或者ctrl-w-q 关闭当前窗口 1.5. 设置vim 为了让vim使用起来更加得心应手，先做一些简单的配置。 编辑VIM配置文件，可能一开始没有这个文件，不过没关系，直接vi ~/.vimrc保存这个文件即可。 1.5.1. 简单设置vim： set number \"\"\"显示行号 set relativenumber \"\"\"显示相对行号（这个非常重要，慢慢体会） set hlsearch \"\"\"搜索结果高亮 set autoindent \"\"\"自动缩进 set smartindent \"\"\"智能缩进 set tabstop=4 \"\"\"设置 tab 制表符所占宽度为 4 set softtabstop=4 \"\"\"设置按 tab 时缩进的宽度为 4 set shiftwidth=4 \"\"\"设置自动缩进宽度为 4 set expandtab \"\"\"缩进时将 tab 制表符转换为空格 filetype on \"\"\"开启文件类型检测 syntax on \"\"\"开启语法高亮 关于vim的配置，还可以看强大的vim配置文件，让编程更随意 1.5.2. 重复上一次命令 vim有一个特殊的命令.，你可以用它重复执行上一个命令。我感觉有点像EXCEL中的F4命令。 1.5.3. 缩进 >> 向右缩进当前行 向左缩进当前行 1.6. 分屏与标签页 1.6.1. 分屏方式 :split 缩写sp or ctrl-w s上下分屏 :vsplit 缩写vs or ctrl-w v左右分屏 :diffsplit 缩写:diffs diff模式打开一个分屏，后面可以加上{filename} 1.6.2. 窗口跳转 ctrl-w w 激活下一个窗口 ctrl-w j 激活下方窗口 ctrl-w k 激活上方窗口 ctrl-w h 激活左侧窗口 ctrl-w l 激活右侧窗口 1.7. 插件 采用vim-plug安装、升级、管理插件。 添加 vim-plug 的配置到 ~/.vimrc 中： 配置以 call plug#begin() 开始 插件列表，以 Plug 命令开头 用 call plug#end() 结束，以初始化插件系统 这将会自动开启 filetype plugin indent on 和syntax enable，如果不希望这 样，你可以在该配置后重置你的设置，例如：filetype indent off, syntax off 1.7.1. 安装vim-plug 先cd ~，然后创建mkdir .vim，接着执行如下命令： curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 会在~/.vim文件夹下创建autoload文件夹，同时将下载的plug.vim文件归档到该文件夹下。 下面是官方对~/.vimrc文件配置的一个Example: \" Specify a directory for plugins \" - For Neovim: ~/.local/share/nvim/plugged \" - Avoid using standard Vim directory names like 'plugin' call plug#begin('~/.vim/plugged') \" Make sure you use single quotes \" 注意要使用单引号 \" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align \" 如果插件在 GitHub 的地址是 https://github.com/junegunn/vim-easy-align \" 可以缩写成下面这样 Plug 'junegunn/vim-easy-align' \" Any valid git URL is allowed \" 或者直接给定插件 git 地址 Plug 'https://github.com/junegunn/vim-github-dashboard.git' \" Multiple Plug commands can be written in a single line using | separators \" 多个 `Plug` 命令可以写在一行，用 `|` 符号分割 Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' \" On-demand loading Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } Plug 'tpope/vim-fireplace', { 'for': 'clojure' } \" Using a non-master branch Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' } \" Using a tagged release; wildcard allowed (requires git 1.9.2 or above) Plug 'fatih/vim-go', { 'tag': '*' } \" Plugin options Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' } \" Plugin outside ~/.vim/plugged with post-update hook Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } \" Unmanaged plugin (manually installed and updated) Plug '~/my-prototype-plugin' \" Initialize plugin system call plug#end() 1.7.2. vim-plug常用命令 常用命令 |命令 |说明| |-----|-----| |PlugInstall [name ...] [#threads]| 安装插件| |PlugUpdate [name ...] [#threads]| 安装或升级插件| |PlugClean |清理插件| |PlugUpgrade |升级 vim-plug| |PlugStatus|查看已安装插件的状态| 1.7.3. 怎么使用这些命令呢？ 直接vim之后，进入冒号的命令模式，输入上述命令就可以执行命令了。 1.8. FAQ 1.8.1. Q:配置VIM，安装vim-plug插件之后，想要生效通过source ~/.vimrc命令生效配置，就会报错：E492: Not an editor command: Plug [root@localhost ~]# source .vimrc -bash: .vimrc: line 2: syntax error near unexpected token `(' -bash: .vimrc: line 2: `call plug#begin('~/.vim/plugged')' A：- error while running “source .vimrc” 原因是，我们.vimrc本身并不是shell文件，而source ~/.vimrc等价于./.vimrc，当然后校验shell语法了。看了StackOverflow上的解答才清楚的。 可以通过输入$vim直接进入vim的命令模式，执行下面命令 :source ~/.vimrc 注意，我这里.vimrc的位置就是位于~目录下，你可以:source /path/to/.vimrc 或者编辑完.vimrc文件，直接： :so $MYVIMRC 1.8.2. Q:从Win上复制文件时，常常因为换行符出错： :set fileformat=unix A： linux的文件换行符为\\n，但windows却非要把\\r\\n作为换行符，所以，vim在解析从windows拷贝到linux的的vimrc时，因为遇到无法解析的\\r，所以报错。 vim E492: Not an editor command: ^M(使用VIM打开文件一直提示错误) 1.9. 参考 Vim 实操教程（Learn Vim） vim环境设定：~/.vimrc(语法高亮等一些的设置) 无香花自开-Vim配置 那些离了就活不了的 VIM 插件 "},"tools/vscode.html":{"url":"tools/vscode.html","title":"VS Code","keywords":"","body":"1. VS Code1.1. 主命令框1.2. 常用快捷键1.2.1. 编辑器与窗口管理1.3. 代码编辑1.3.1. 格式调整1.3.2. 光标相关1.3.3. 重构代码1.3.4. 查找替换1.4. 显示相关1.5. 其他1.5.1. VS Code 中文注释显示乱码怎么办？1.6. 我的配置1.7. 常用扩展1.7.1. 主题1.7.2. 开发扩展1.8. FAQ1.8.1. 如何设置中文界面1.9. 参考1. VS Code 官网： https://code.visualstudio.com/ 1.1. 主命令框 F1或Ctrl+Shift+P: 打开命令面板。在打开的输入框内，可以输入任何命令，例如： 按一下 Backspace会进入到 Ctrl+P 模式 在Ctrl+P下输入>可以进入Ctrl+Shift+P模式 在 Ctrl+P 窗口下还可以: 直接输入文件名，跳转到文件 ?列出当前可执行的动作 !显示 Errors或 Warnings，也可以Ctrl+Shift+M :跳转到行数，也可以 Ctrl+G 直接进入 @跳转到symbol（搜索变量或者函数），也可以 Ctrl+Shift+O 直接进入 @根据分类跳转symbol，查找属性或函数，也可以 Ctrl+Shift+O 后输入:进入 #根据名字查找 symbol，也可以 Ctrl+T 1.2. 常用快捷键 1.2.1. 编辑器与窗口管理 打开一个新窗口： Ctrl+Shift+N 关闭窗口： Ctrl+Shift+W 同时打开多个编辑器（查看多个文件） 切出一个新的编辑器（最多 3 个） Ctrl+\\，也可以按住 Ctrl 鼠标点击 Explorer 里的文件名 左中右 3 个编辑器的快捷键 Ctrl+1 Ctrl+2 Ctrl+3 编辑器换位置， Ctrl+k然后按 Left或 Right 1.3. 代码编辑 1.3.1. 格式调整 对python文件进行代码格式化操作时，会提示安装autopep8 代码格式化： Shift+Alt+F，或 Ctrl+Shift+P 后输入 format code 代码行缩进: Ctrl+[ 、 Ctrl+] 在当前行下边插入一行 Ctrl+Enter 在当前行上方插入一行 Ctrl+Shift+Enter 上下移动一行： Alt+Up 或 Alt+Down 向上向下复制一行： Shift+Alt+Up 或 Shift+Alt+Down 1.3.2. 光标相关 移动到定义处： F12 定义处缩略图：只看一眼而不跳转过去:Alt+F12 移动到文件结尾： Ctrl+End 移动到文件开头： Ctrl+Home 下面两个功能和alt+↑/↓配合，很方便的移动代码块： 选择从光标到行尾：Shift+End 选择从行首到光标处： Shift+Home 这两个功能很爽，可以同时编辑一些变量名： 多行编辑(列编辑)：Ctrl+Alt+Down/Up或者Alt+Shift+鼠标左键， 同时选中所有匹配： Ctrl+Shift+L Ctrl+D 下一个匹配的也被选中 (在 sublime 中是删除当前行，后面自定义快键键中，设置与 Ctrl+Shift+K 互换了) 回退上一个光标操作： Ctrl+U 删除光标右侧的所有字： Ctrl+Delete 扩展/缩小选取范围： Shift+Alt+Left 和 Shift+Alt+Right 移动到后半个括号： Ctrl+Shift+] 1.3.3. 重构代码 查看函数引用和批量休修改函数名，好用： 重命名：比如要修改一个方法名，可以选中后按 F2，输入新的名字，回车，会发现所有的文件都修改了 找到所有的引用： Shift+F12 同时修改本文件中所有匹配的： Ctrl+F12 跳转到下一个 Error 或 Warning：当有多个错误时可以按 F8逐个跳转 查看 diff： 在 explorer 里选择文件右键 Set file to compare，然后需要对比的文件上右键选择 Compare with file_name_you_chose 1.3.4. 查找替换 查找:Ctrl+F 查找替换:Ctrl+H 整个文件夹中查找:Ctrl+Shift+F 1.4. 显示相关 全屏：F11 zoomIn/zoomOut：Ctrl +/- 侧边栏显/隐：Ctrl+B 显示资源管理器:Ctrl+Shift+E 显示搜索:Ctrl+Shift+F 显示 Git:Ctrl+Shift+G 显示 Debug:Ctrl+Shift+D 显示 Output:Ctrl+Shift+U 1.5. 其他 自动保存：File -> AutoSave ，或者 Ctrl+Shift+P，输入 auto 1.5.1. VS Code 中文注释显示乱码怎么办？ https://www.zhihu.com/question/34415763/answer/60444047 将设置中的\"files.autoGuessEncoding\"项的值改为true即可。 1.6. 我的配置 { \"workbench.iconTheme\": \"vscode-icons\", \"files.autoSave\": \"onWindowChange\", // 设置保存时，自动将Python代码的一些空格给trim掉； \"files.trimTrailingWhitespace\": true, // 将一些编译后而不想在编辑器里看到的文件隐藏； \"files.exclude\": { \".vs*\": true, \"*.*~\": true, \"*.pyc\": true, \"*/*.pyc\": true }, \"terminal.integrated.rendererType\": \"dom\", \"terminal.integrated.shell.windows\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\", \"python.formatting.autopep8Args\": [ \"--max-line-length=100\" ], \"editor.formatOnSave\": true, \"python.linting.pylintEnabled\": true, \"python.linting.pylintArgs\": [ \"--include-naming-hint=n\", \"--disable=W0311\", \"--disable=C0103\", \"--disable=E1101\" ], \"files.eol\": \"\\n\", \"breadcrumbs.enabled\": true, } 1.7. 常用扩展 VS Code扩展商店：https://marketplace.visualstudio.com/vscode 1.7.1. 主题 可以来主题商城选择： 切换主题的快捷键：ctrl+k,ctrl+t One Dark Pro Atom One Dark FlatUI Material Icon Theme: 图标主题 vscode-icons VSCode Great Icons Dracula Official：主题，推荐 1.7.2. 开发扩展 AutoFileNmae:auto complete file name，自动补全文件的名字 code runner:ctrl+alt+n Guides:显示代码对其辅助线 gitlens:显示代码每一行的最新修改人 Beautify:显示js/json/css美化，按F1 Prettier - Code formatter Path Intellisense: 路径匹配 Path Autocomplete Auto Rename Tag：自动修改标签 Color Highlight:写csss时，颜色值会增加对应的颜色背景显示 Vetur：VUE扩展 open in browser:alt+b选择浏览器预览文件 Rainbow Brackets：有颜色的显示括号匹配 Settings Sync: 同步配置 下面介绍一下怎么设置同步： ctrl+shift+p，输入sync，会看到相关选项，选择update/upload settings，然后会输入https://github.com/settings/tokens中设置的key。具体的用法，Settings Sync的扩展主页介绍的很详细了：https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync 1.8. FAQ 1.8.1. 如何设置中文界面 设置中文界面 language-pack 1.9. 参考 Visual Studio Code 简明使用教程-w3cschool VS Code 配置 VSCode配置备忘 Getting Started with Python in VS Code Visual Studio Code初探 使用Python virtualenv时如何设置VS code 学会用好 Visual Studio Code "},"tools/Pycharm.html":{"url":"tools/Pycharm.html","title":"Pycharm","keywords":"","body":"1. Pycharm1. Pycharm "},"tools/often.html":{"url":"tools/often.html","title":"常用工具","keywords":"","body":"1. 常用工具1.1. 阅读1.1.1. RSS相关1. 常用工具 本文记录一下平日里常用的好工具 1.1. 阅读 1.1.1. RSS相关 如今信息爆炸，各种微信公众号、知乎专栏分享，但是往往一篇文章分享来分享去的，还有各种广告，个人还是喜欢RSS方式！ RSS源-rsshub inoreader "},"tools/soft_skills.html":{"url":"tools/soft_skills.html","title":"软技能","keywords":"","body":"1. 软技能1.1. 英语1. 软技能 1.1. 英语 《English-level-up-tips-for-Chinese》 "},"end/":{"url":"end/","title":"结束","keywords":"","body":"1. 结束1. 结束 "}}